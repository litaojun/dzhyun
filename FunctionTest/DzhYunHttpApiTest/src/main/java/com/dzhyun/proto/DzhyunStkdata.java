// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dzhyun.stkdata.proto

package com.dzhyun.proto;

public final class DzhyunStkdata {
  private DzhyunStkdata() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface StkDataSingleOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required string obj = 1;
    /**
     * <code>required string obj = 1;</code>
     *
     * <pre>
     *股票代码，如 SH600000 不推送 
     * </pre>
     */
    boolean hasObj();
    /**
     * <code>required string obj = 1;</code>
     *
     * <pre>
     *股票代码，如 SH600000 不推送 
     * </pre>
     */
    java.lang.String getObj();
    /**
     * <code>required string obj = 1;</code>
     *
     * <pre>
     *股票代码，如 SH600000 不推送 
     * </pre>
     */
    com.google.protobuf.ByteString
        getObjBytes();

    // optional string label = 2;
    /**
     * <code>optional string label = 2;</code>
     *
     * <pre>
     *股票标签，如 600000 不推送 
     * </pre>
     */
    boolean hasLabel();
    /**
     * <code>optional string label = 2;</code>
     *
     * <pre>
     *股票标签，如 600000 不推送 
     * </pre>
     */
    java.lang.String getLabel();
    /**
     * <code>optional string label = 2;</code>
     *
     * <pre>
     *股票标签，如 600000 不推送 
     * </pre>
     */
    com.google.protobuf.ByteString
        getLabelBytes();

    // optional string name = 3;
    /**
     * <code>optional string name = 3;</code>
     *
     * <pre>
     *名称 不推送 
     * </pre>
     */
    boolean hasName();
    /**
     * <code>optional string name = 3;</code>
     *
     * <pre>
     *名称 不推送 
     * </pre>
     */
    java.lang.String getName();
    /**
     * <code>optional string name = 3;</code>
     *
     * <pre>
     *名称 不推送 
     * </pre>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    // optional int64 open = 4;
    /**
     * <code>optional int64 open = 4;</code>
     *
     * <pre>
     *开盘 元 推送 
     * </pre>
     */
    boolean hasOpen();
    /**
     * <code>optional int64 open = 4;</code>
     *
     * <pre>
     *开盘 元 推送 
     * </pre>
     */
    long getOpen();

    // optional int64 high = 5;
    /**
     * <code>optional int64 high = 5;</code>
     *
     * <pre>
     *最高 元 推送 
     * </pre>
     */
    boolean hasHigh();
    /**
     * <code>optional int64 high = 5;</code>
     *
     * <pre>
     *最高 元 推送 
     * </pre>
     */
    long getHigh();

    // optional int64 low = 6;
    /**
     * <code>optional int64 low = 6;</code>
     *
     * <pre>
     *最低 元 推送 
     * </pre>
     */
    boolean hasLow();
    /**
     * <code>optional int64 low = 6;</code>
     *
     * <pre>
     *最低 元 推送 
     * </pre>
     */
    long getLow();

    // optional int64 price = 7;
    /**
     * <code>optional int64 price = 7;</code>
     *
     * <pre>
     *NUM 最新 元 推送 
     * </pre>
     */
    boolean hasPrice();
    /**
     * <code>optional int64 price = 7;</code>
     *
     * <pre>
     *NUM 最新 元 推送 
     * </pre>
     */
    long getPrice();

    // optional int64 zuoshou = 8;
    /**
     * <code>optional int64 zuoshou = 8;</code>
     *
     * <pre>
     *NUM 昨收 元 推送 
     * </pre>
     */
    boolean hasZuoshou();
    /**
     * <code>optional int64 zuoshou = 8;</code>
     *
     * <pre>
     *NUM 昨收 元 推送 
     * </pre>
     */
    long getZuoshou();

    // optional int64 vol = 9;
    /**
     * <code>optional int64 vol = 9;</code>
     *
     * <pre>
     *NUM 总手 手 推送 
     * </pre>
     */
    boolean hasVol();
    /**
     * <code>optional int64 vol = 9;</code>
     *
     * <pre>
     *NUM 总手 手 推送 
     * </pre>
     */
    long getVol();

    // optional int64 xianshou = 10;
    /**
     * <code>optional int64 xianshou = 10;</code>
     *
     * <pre>
     * NUM 现手 手 推送 
     * </pre>
     */
    boolean hasXianshou();
    /**
     * <code>optional int64 xianshou = 10;</code>
     *
     * <pre>
     * NUM 现手 手 推送 
     * </pre>
     */
    long getXianshou();

    // optional int64 amount = 11;
    /**
     * <code>optional int64 amount = 11;</code>
     *
     * <pre>
     * NUM 成交额 万元 推送 
     * </pre>
     */
    boolean hasAmount();
    /**
     * <code>optional int64 amount = 11;</code>
     *
     * <pre>
     * NUM 成交额 万元 推送 
     * </pre>
     */
    long getAmount();

    // optional int64 junjia = 12;
    /**
     * <code>optional int64 junjia = 12;</code>
     *
     * <pre>
     * NUM 均价 元 推送 
     * </pre>
     */
    boolean hasJunjia();
    /**
     * <code>optional int64 junjia = 12;</code>
     *
     * <pre>
     * NUM 均价 元 推送 
     * </pre>
     */
    long getJunjia();

    // optional int64 zhangdie = 13;
    /**
     * <code>optional int64 zhangdie = 13;</code>
     *
     * <pre>
     * NUM 涨跌 元 推送 
     * </pre>
     */
    boolean hasZhangdie();
    /**
     * <code>optional int64 zhangdie = 13;</code>
     *
     * <pre>
     * NUM 涨跌 元 推送 
     * </pre>
     */
    long getZhangdie();

    // optional int64 zhenfu = 14;
    /**
     * <code>optional int64 zhenfu = 14;</code>
     *
     * <pre>
     *NUM 振幅 % 推送 
     * </pre>
     */
    boolean hasZhenfu();
    /**
     * <code>optional int64 zhenfu = 14;</code>
     *
     * <pre>
     *NUM 振幅 % 推送 
     * </pre>
     */
    long getZhenfu();

    // optional int64 zhangfu = 15;
    /**
     * <code>optional int64 zhangfu = 15;</code>
     *
     * <pre>
     * NUM 涨幅 % 推送 	
     * </pre>
     */
    boolean hasZhangfu();
    /**
     * <code>optional int64 zhangfu = 15;</code>
     *
     * <pre>
     * NUM 涨幅 % 推送 	
     * </pre>
     */
    long getZhangfu();

    // optional int64 neipan = 16;
    /**
     * <code>optional int64 neipan = 16;</code>
     *
     * <pre>
     *NUM 内盘 手 推送 
     * </pre>
     */
    boolean hasNeipan();
    /**
     * <code>optional int64 neipan = 16;</code>
     *
     * <pre>
     *NUM 内盘 手 推送 
     * </pre>
     */
    long getNeipan();

    // optional int64 waipan = 17;
    /**
     * <code>optional int64 waipan = 17;</code>
     *
     * <pre>
     *NUM 外盘 手 推送 
     * </pre>
     */
    boolean hasWaipan();
    /**
     * <code>optional int64 waipan = 17;</code>
     *
     * <pre>
     *NUM 外盘 手 推送 
     * </pre>
     */
    long getWaipan();
  }
  /**
   * Protobuf type {@code dzhyun.StkDataSingle}
   */
  public static final class StkDataSingle extends
      com.google.protobuf.GeneratedMessage
      implements StkDataSingleOrBuilder {
    // Use StkDataSingle.newBuilder() to construct.
    private StkDataSingle(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private StkDataSingle(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final StkDataSingle defaultInstance;
    public static StkDataSingle getDefaultInstance() {
      return defaultInstance;
    }

    public StkDataSingle getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private StkDataSingle(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              obj_ = input.readBytes();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              label_ = input.readBytes();
              break;
            }
            case 26: {
              bitField0_ |= 0x00000004;
              name_ = input.readBytes();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              open_ = input.readInt64();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              high_ = input.readInt64();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              low_ = input.readInt64();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              price_ = input.readInt64();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              zuoshou_ = input.readInt64();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              vol_ = input.readInt64();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              xianshou_ = input.readInt64();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              amount_ = input.readInt64();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000800;
              junjia_ = input.readInt64();
              break;
            }
            case 104: {
              bitField0_ |= 0x00001000;
              zhangdie_ = input.readInt64();
              break;
            }
            case 112: {
              bitField0_ |= 0x00002000;
              zhenfu_ = input.readInt64();
              break;
            }
            case 120: {
              bitField0_ |= 0x00004000;
              zhangfu_ = input.readInt64();
              break;
            }
            case 128: {
              bitField0_ |= 0x00008000;
              neipan_ = input.readInt64();
              break;
            }
            case 136: {
              bitField0_ |= 0x00010000;
              waipan_ = input.readInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dzhyun.proto.DzhyunStkdata.internal_static_dzhyun_StkDataSingle_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dzhyun.proto.DzhyunStkdata.internal_static_dzhyun_StkDataSingle_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dzhyun.proto.DzhyunStkdata.StkDataSingle.class, com.dzhyun.proto.DzhyunStkdata.StkDataSingle.Builder.class);
    }

    public static com.google.protobuf.Parser<StkDataSingle> PARSER =
        new com.google.protobuf.AbstractParser<StkDataSingle>() {
      public StkDataSingle parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new StkDataSingle(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<StkDataSingle> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required string obj = 1;
    public static final int OBJ_FIELD_NUMBER = 1;
    private java.lang.Object obj_;
    /**
     * <code>required string obj = 1;</code>
     *
     * <pre>
     *股票代码，如 SH600000 不推送 
     * </pre>
     */
    public boolean hasObj() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string obj = 1;</code>
     *
     * <pre>
     *股票代码，如 SH600000 不推送 
     * </pre>
     */
    public java.lang.String getObj() {
      java.lang.Object ref = obj_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          obj_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string obj = 1;</code>
     *
     * <pre>
     *股票代码，如 SH600000 不推送 
     * </pre>
     */
    public com.google.protobuf.ByteString
        getObjBytes() {
      java.lang.Object ref = obj_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        obj_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional string label = 2;
    public static final int LABEL_FIELD_NUMBER = 2;
    private java.lang.Object label_;
    /**
     * <code>optional string label = 2;</code>
     *
     * <pre>
     *股票标签，如 600000 不推送 
     * </pre>
     */
    public boolean hasLabel() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string label = 2;</code>
     *
     * <pre>
     *股票标签，如 600000 不推送 
     * </pre>
     */
    public java.lang.String getLabel() {
      java.lang.Object ref = label_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          label_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string label = 2;</code>
     *
     * <pre>
     *股票标签，如 600000 不推送 
     * </pre>
     */
    public com.google.protobuf.ByteString
        getLabelBytes() {
      java.lang.Object ref = label_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        label_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional string name = 3;
    public static final int NAME_FIELD_NUMBER = 3;
    private java.lang.Object name_;
    /**
     * <code>optional string name = 3;</code>
     *
     * <pre>
     *名称 不推送 
     * </pre>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string name = 3;</code>
     *
     * <pre>
     *名称 不推送 
     * </pre>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string name = 3;</code>
     *
     * <pre>
     *名称 不推送 
     * </pre>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional int64 open = 4;
    public static final int OPEN_FIELD_NUMBER = 4;
    private long open_;
    /**
     * <code>optional int64 open = 4;</code>
     *
     * <pre>
     *开盘 元 推送 
     * </pre>
     */
    public boolean hasOpen() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int64 open = 4;</code>
     *
     * <pre>
     *开盘 元 推送 
     * </pre>
     */
    public long getOpen() {
      return open_;
    }

    // optional int64 high = 5;
    public static final int HIGH_FIELD_NUMBER = 5;
    private long high_;
    /**
     * <code>optional int64 high = 5;</code>
     *
     * <pre>
     *最高 元 推送 
     * </pre>
     */
    public boolean hasHigh() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int64 high = 5;</code>
     *
     * <pre>
     *最高 元 推送 
     * </pre>
     */
    public long getHigh() {
      return high_;
    }

    // optional int64 low = 6;
    public static final int LOW_FIELD_NUMBER = 6;
    private long low_;
    /**
     * <code>optional int64 low = 6;</code>
     *
     * <pre>
     *最低 元 推送 
     * </pre>
     */
    public boolean hasLow() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int64 low = 6;</code>
     *
     * <pre>
     *最低 元 推送 
     * </pre>
     */
    public long getLow() {
      return low_;
    }

    // optional int64 price = 7;
    public static final int PRICE_FIELD_NUMBER = 7;
    private long price_;
    /**
     * <code>optional int64 price = 7;</code>
     *
     * <pre>
     *NUM 最新 元 推送 
     * </pre>
     */
    public boolean hasPrice() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int64 price = 7;</code>
     *
     * <pre>
     *NUM 最新 元 推送 
     * </pre>
     */
    public long getPrice() {
      return price_;
    }

    // optional int64 zuoshou = 8;
    public static final int ZUOSHOU_FIELD_NUMBER = 8;
    private long zuoshou_;
    /**
     * <code>optional int64 zuoshou = 8;</code>
     *
     * <pre>
     *NUM 昨收 元 推送 
     * </pre>
     */
    public boolean hasZuoshou() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int64 zuoshou = 8;</code>
     *
     * <pre>
     *NUM 昨收 元 推送 
     * </pre>
     */
    public long getZuoshou() {
      return zuoshou_;
    }

    // optional int64 vol = 9;
    public static final int VOL_FIELD_NUMBER = 9;
    private long vol_;
    /**
     * <code>optional int64 vol = 9;</code>
     *
     * <pre>
     *NUM 总手 手 推送 
     * </pre>
     */
    public boolean hasVol() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int64 vol = 9;</code>
     *
     * <pre>
     *NUM 总手 手 推送 
     * </pre>
     */
    public long getVol() {
      return vol_;
    }

    // optional int64 xianshou = 10;
    public static final int XIANSHOU_FIELD_NUMBER = 10;
    private long xianshou_;
    /**
     * <code>optional int64 xianshou = 10;</code>
     *
     * <pre>
     * NUM 现手 手 推送 
     * </pre>
     */
    public boolean hasXianshou() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional int64 xianshou = 10;</code>
     *
     * <pre>
     * NUM 现手 手 推送 
     * </pre>
     */
    public long getXianshou() {
      return xianshou_;
    }

    // optional int64 amount = 11;
    public static final int AMOUNT_FIELD_NUMBER = 11;
    private long amount_;
    /**
     * <code>optional int64 amount = 11;</code>
     *
     * <pre>
     * NUM 成交额 万元 推送 
     * </pre>
     */
    public boolean hasAmount() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional int64 amount = 11;</code>
     *
     * <pre>
     * NUM 成交额 万元 推送 
     * </pre>
     */
    public long getAmount() {
      return amount_;
    }

    // optional int64 junjia = 12;
    public static final int JUNJIA_FIELD_NUMBER = 12;
    private long junjia_;
    /**
     * <code>optional int64 junjia = 12;</code>
     *
     * <pre>
     * NUM 均价 元 推送 
     * </pre>
     */
    public boolean hasJunjia() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional int64 junjia = 12;</code>
     *
     * <pre>
     * NUM 均价 元 推送 
     * </pre>
     */
    public long getJunjia() {
      return junjia_;
    }

    // optional int64 zhangdie = 13;
    public static final int ZHANGDIE_FIELD_NUMBER = 13;
    private long zhangdie_;
    /**
     * <code>optional int64 zhangdie = 13;</code>
     *
     * <pre>
     * NUM 涨跌 元 推送 
     * </pre>
     */
    public boolean hasZhangdie() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional int64 zhangdie = 13;</code>
     *
     * <pre>
     * NUM 涨跌 元 推送 
     * </pre>
     */
    public long getZhangdie() {
      return zhangdie_;
    }

    // optional int64 zhenfu = 14;
    public static final int ZHENFU_FIELD_NUMBER = 14;
    private long zhenfu_;
    /**
     * <code>optional int64 zhenfu = 14;</code>
     *
     * <pre>
     *NUM 振幅 % 推送 
     * </pre>
     */
    public boolean hasZhenfu() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional int64 zhenfu = 14;</code>
     *
     * <pre>
     *NUM 振幅 % 推送 
     * </pre>
     */
    public long getZhenfu() {
      return zhenfu_;
    }

    // optional int64 zhangfu = 15;
    public static final int ZHANGFU_FIELD_NUMBER = 15;
    private long zhangfu_;
    /**
     * <code>optional int64 zhangfu = 15;</code>
     *
     * <pre>
     * NUM 涨幅 % 推送 	
     * </pre>
     */
    public boolean hasZhangfu() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional int64 zhangfu = 15;</code>
     *
     * <pre>
     * NUM 涨幅 % 推送 	
     * </pre>
     */
    public long getZhangfu() {
      return zhangfu_;
    }

    // optional int64 neipan = 16;
    public static final int NEIPAN_FIELD_NUMBER = 16;
    private long neipan_;
    /**
     * <code>optional int64 neipan = 16;</code>
     *
     * <pre>
     *NUM 内盘 手 推送 
     * </pre>
     */
    public boolean hasNeipan() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional int64 neipan = 16;</code>
     *
     * <pre>
     *NUM 内盘 手 推送 
     * </pre>
     */
    public long getNeipan() {
      return neipan_;
    }

    // optional int64 waipan = 17;
    public static final int WAIPAN_FIELD_NUMBER = 17;
    private long waipan_;
    /**
     * <code>optional int64 waipan = 17;</code>
     *
     * <pre>
     *NUM 外盘 手 推送 
     * </pre>
     */
    public boolean hasWaipan() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional int64 waipan = 17;</code>
     *
     * <pre>
     *NUM 外盘 手 推送 
     * </pre>
     */
    public long getWaipan() {
      return waipan_;
    }

    private void initFields() {
      obj_ = "";
      label_ = "";
      name_ = "";
      open_ = 0L;
      high_ = 0L;
      low_ = 0L;
      price_ = 0L;
      zuoshou_ = 0L;
      vol_ = 0L;
      xianshou_ = 0L;
      amount_ = 0L;
      junjia_ = 0L;
      zhangdie_ = 0L;
      zhenfu_ = 0L;
      zhangfu_ = 0L;
      neipan_ = 0L;
      waipan_ = 0L;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasObj()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getObjBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getLabelBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getNameBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt64(4, open_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt64(5, high_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt64(6, low_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt64(7, price_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt64(8, zuoshou_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt64(9, vol_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt64(10, xianshou_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt64(11, amount_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeInt64(12, junjia_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeInt64(13, zhangdie_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeInt64(14, zhenfu_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeInt64(15, zhangfu_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeInt64(16, neipan_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeInt64(17, waipan_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getObjBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getLabelBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getNameBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(4, open_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(5, high_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(6, low_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(7, price_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(8, zuoshou_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(9, vol_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(10, xianshou_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(11, amount_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(12, junjia_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(13, zhangdie_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(14, zhenfu_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(15, zhangfu_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(16, neipan_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(17, waipan_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.dzhyun.proto.DzhyunStkdata.StkDataSingle parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dzhyun.proto.DzhyunStkdata.StkDataSingle parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dzhyun.proto.DzhyunStkdata.StkDataSingle parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dzhyun.proto.DzhyunStkdata.StkDataSingle parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dzhyun.proto.DzhyunStkdata.StkDataSingle parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dzhyun.proto.DzhyunStkdata.StkDataSingle parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.dzhyun.proto.DzhyunStkdata.StkDataSingle parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.dzhyun.proto.DzhyunStkdata.StkDataSingle parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.dzhyun.proto.DzhyunStkdata.StkDataSingle parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dzhyun.proto.DzhyunStkdata.StkDataSingle parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dzhyun.proto.DzhyunStkdata.StkDataSingle prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dzhyun.StkDataSingle}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.dzhyun.proto.DzhyunStkdata.StkDataSingleOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dzhyun.proto.DzhyunStkdata.internal_static_dzhyun_StkDataSingle_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dzhyun.proto.DzhyunStkdata.internal_static_dzhyun_StkDataSingle_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dzhyun.proto.DzhyunStkdata.StkDataSingle.class, com.dzhyun.proto.DzhyunStkdata.StkDataSingle.Builder.class);
      }

      // Construct using com.dzhyun.proto.DzhyunStkdata.StkDataSingle.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        obj_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        label_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        open_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000008);
        high_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000010);
        low_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000020);
        price_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000040);
        zuoshou_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000080);
        vol_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000100);
        xianshou_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000200);
        amount_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000400);
        junjia_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000800);
        zhangdie_ = 0L;
        bitField0_ = (bitField0_ & ~0x00001000);
        zhenfu_ = 0L;
        bitField0_ = (bitField0_ & ~0x00002000);
        zhangfu_ = 0L;
        bitField0_ = (bitField0_ & ~0x00004000);
        neipan_ = 0L;
        bitField0_ = (bitField0_ & ~0x00008000);
        waipan_ = 0L;
        bitField0_ = (bitField0_ & ~0x00010000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dzhyun.proto.DzhyunStkdata.internal_static_dzhyun_StkDataSingle_descriptor;
      }

      public com.dzhyun.proto.DzhyunStkdata.StkDataSingle getDefaultInstanceForType() {
        return com.dzhyun.proto.DzhyunStkdata.StkDataSingle.getDefaultInstance();
      }

      public com.dzhyun.proto.DzhyunStkdata.StkDataSingle build() {
        com.dzhyun.proto.DzhyunStkdata.StkDataSingle result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.dzhyun.proto.DzhyunStkdata.StkDataSingle buildPartial() {
        com.dzhyun.proto.DzhyunStkdata.StkDataSingle result = new com.dzhyun.proto.DzhyunStkdata.StkDataSingle(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.obj_ = obj_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.label_ = label_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.open_ = open_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.high_ = high_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.low_ = low_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.price_ = price_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.zuoshou_ = zuoshou_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.vol_ = vol_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.xianshou_ = xianshou_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.amount_ = amount_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.junjia_ = junjia_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.zhangdie_ = zhangdie_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.zhenfu_ = zhenfu_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.zhangfu_ = zhangfu_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.neipan_ = neipan_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.waipan_ = waipan_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dzhyun.proto.DzhyunStkdata.StkDataSingle) {
          return mergeFrom((com.dzhyun.proto.DzhyunStkdata.StkDataSingle)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dzhyun.proto.DzhyunStkdata.StkDataSingle other) {
        if (other == com.dzhyun.proto.DzhyunStkdata.StkDataSingle.getDefaultInstance()) return this;
        if (other.hasObj()) {
          bitField0_ |= 0x00000001;
          obj_ = other.obj_;
          onChanged();
        }
        if (other.hasLabel()) {
          bitField0_ |= 0x00000002;
          label_ = other.label_;
          onChanged();
        }
        if (other.hasName()) {
          bitField0_ |= 0x00000004;
          name_ = other.name_;
          onChanged();
        }
        if (other.hasOpen()) {
          setOpen(other.getOpen());
        }
        if (other.hasHigh()) {
          setHigh(other.getHigh());
        }
        if (other.hasLow()) {
          setLow(other.getLow());
        }
        if (other.hasPrice()) {
          setPrice(other.getPrice());
        }
        if (other.hasZuoshou()) {
          setZuoshou(other.getZuoshou());
        }
        if (other.hasVol()) {
          setVol(other.getVol());
        }
        if (other.hasXianshou()) {
          setXianshou(other.getXianshou());
        }
        if (other.hasAmount()) {
          setAmount(other.getAmount());
        }
        if (other.hasJunjia()) {
          setJunjia(other.getJunjia());
        }
        if (other.hasZhangdie()) {
          setZhangdie(other.getZhangdie());
        }
        if (other.hasZhenfu()) {
          setZhenfu(other.getZhenfu());
        }
        if (other.hasZhangfu()) {
          setZhangfu(other.getZhangfu());
        }
        if (other.hasNeipan()) {
          setNeipan(other.getNeipan());
        }
        if (other.hasWaipan()) {
          setWaipan(other.getWaipan());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasObj()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dzhyun.proto.DzhyunStkdata.StkDataSingle parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dzhyun.proto.DzhyunStkdata.StkDataSingle) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required string obj = 1;
      private java.lang.Object obj_ = "";
      /**
       * <code>required string obj = 1;</code>
       *
       * <pre>
       *股票代码，如 SH600000 不推送 
       * </pre>
       */
      public boolean hasObj() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string obj = 1;</code>
       *
       * <pre>
       *股票代码，如 SH600000 不推送 
       * </pre>
       */
      public java.lang.String getObj() {
        java.lang.Object ref = obj_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          obj_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string obj = 1;</code>
       *
       * <pre>
       *股票代码，如 SH600000 不推送 
       * </pre>
       */
      public com.google.protobuf.ByteString
          getObjBytes() {
        java.lang.Object ref = obj_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          obj_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string obj = 1;</code>
       *
       * <pre>
       *股票代码，如 SH600000 不推送 
       * </pre>
       */
      public Builder setObj(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        obj_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string obj = 1;</code>
       *
       * <pre>
       *股票代码，如 SH600000 不推送 
       * </pre>
       */
      public Builder clearObj() {
        bitField0_ = (bitField0_ & ~0x00000001);
        obj_ = getDefaultInstance().getObj();
        onChanged();
        return this;
      }
      /**
       * <code>required string obj = 1;</code>
       *
       * <pre>
       *股票代码，如 SH600000 不推送 
       * </pre>
       */
      public Builder setObjBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        obj_ = value;
        onChanged();
        return this;
      }

      // optional string label = 2;
      private java.lang.Object label_ = "";
      /**
       * <code>optional string label = 2;</code>
       *
       * <pre>
       *股票标签，如 600000 不推送 
       * </pre>
       */
      public boolean hasLabel() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string label = 2;</code>
       *
       * <pre>
       *股票标签，如 600000 不推送 
       * </pre>
       */
      public java.lang.String getLabel() {
        java.lang.Object ref = label_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          label_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string label = 2;</code>
       *
       * <pre>
       *股票标签，如 600000 不推送 
       * </pre>
       */
      public com.google.protobuf.ByteString
          getLabelBytes() {
        java.lang.Object ref = label_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          label_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string label = 2;</code>
       *
       * <pre>
       *股票标签，如 600000 不推送 
       * </pre>
       */
      public Builder setLabel(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        label_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string label = 2;</code>
       *
       * <pre>
       *股票标签，如 600000 不推送 
       * </pre>
       */
      public Builder clearLabel() {
        bitField0_ = (bitField0_ & ~0x00000002);
        label_ = getDefaultInstance().getLabel();
        onChanged();
        return this;
      }
      /**
       * <code>optional string label = 2;</code>
       *
       * <pre>
       *股票标签，如 600000 不推送 
       * </pre>
       */
      public Builder setLabelBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        label_ = value;
        onChanged();
        return this;
      }

      // optional string name = 3;
      private java.lang.Object name_ = "";
      /**
       * <code>optional string name = 3;</code>
       *
       * <pre>
       *名称 不推送 
       * </pre>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string name = 3;</code>
       *
       * <pre>
       *名称 不推送 
       * </pre>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string name = 3;</code>
       *
       * <pre>
       *名称 不推送 
       * </pre>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string name = 3;</code>
       *
       * <pre>
       *名称 不推送 
       * </pre>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 3;</code>
       *
       * <pre>
       *名称 不推送 
       * </pre>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000004);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 3;</code>
       *
       * <pre>
       *名称 不推送 
       * </pre>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        name_ = value;
        onChanged();
        return this;
      }

      // optional int64 open = 4;
      private long open_ ;
      /**
       * <code>optional int64 open = 4;</code>
       *
       * <pre>
       *开盘 元 推送 
       * </pre>
       */
      public boolean hasOpen() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int64 open = 4;</code>
       *
       * <pre>
       *开盘 元 推送 
       * </pre>
       */
      public long getOpen() {
        return open_;
      }
      /**
       * <code>optional int64 open = 4;</code>
       *
       * <pre>
       *开盘 元 推送 
       * </pre>
       */
      public Builder setOpen(long value) {
        bitField0_ |= 0x00000008;
        open_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 open = 4;</code>
       *
       * <pre>
       *开盘 元 推送 
       * </pre>
       */
      public Builder clearOpen() {
        bitField0_ = (bitField0_ & ~0x00000008);
        open_ = 0L;
        onChanged();
        return this;
      }

      // optional int64 high = 5;
      private long high_ ;
      /**
       * <code>optional int64 high = 5;</code>
       *
       * <pre>
       *最高 元 推送 
       * </pre>
       */
      public boolean hasHigh() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int64 high = 5;</code>
       *
       * <pre>
       *最高 元 推送 
       * </pre>
       */
      public long getHigh() {
        return high_;
      }
      /**
       * <code>optional int64 high = 5;</code>
       *
       * <pre>
       *最高 元 推送 
       * </pre>
       */
      public Builder setHigh(long value) {
        bitField0_ |= 0x00000010;
        high_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 high = 5;</code>
       *
       * <pre>
       *最高 元 推送 
       * </pre>
       */
      public Builder clearHigh() {
        bitField0_ = (bitField0_ & ~0x00000010);
        high_ = 0L;
        onChanged();
        return this;
      }

      // optional int64 low = 6;
      private long low_ ;
      /**
       * <code>optional int64 low = 6;</code>
       *
       * <pre>
       *最低 元 推送 
       * </pre>
       */
      public boolean hasLow() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int64 low = 6;</code>
       *
       * <pre>
       *最低 元 推送 
       * </pre>
       */
      public long getLow() {
        return low_;
      }
      /**
       * <code>optional int64 low = 6;</code>
       *
       * <pre>
       *最低 元 推送 
       * </pre>
       */
      public Builder setLow(long value) {
        bitField0_ |= 0x00000020;
        low_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 low = 6;</code>
       *
       * <pre>
       *最低 元 推送 
       * </pre>
       */
      public Builder clearLow() {
        bitField0_ = (bitField0_ & ~0x00000020);
        low_ = 0L;
        onChanged();
        return this;
      }

      // optional int64 price = 7;
      private long price_ ;
      /**
       * <code>optional int64 price = 7;</code>
       *
       * <pre>
       *NUM 最新 元 推送 
       * </pre>
       */
      public boolean hasPrice() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int64 price = 7;</code>
       *
       * <pre>
       *NUM 最新 元 推送 
       * </pre>
       */
      public long getPrice() {
        return price_;
      }
      /**
       * <code>optional int64 price = 7;</code>
       *
       * <pre>
       *NUM 最新 元 推送 
       * </pre>
       */
      public Builder setPrice(long value) {
        bitField0_ |= 0x00000040;
        price_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 price = 7;</code>
       *
       * <pre>
       *NUM 最新 元 推送 
       * </pre>
       */
      public Builder clearPrice() {
        bitField0_ = (bitField0_ & ~0x00000040);
        price_ = 0L;
        onChanged();
        return this;
      }

      // optional int64 zuoshou = 8;
      private long zuoshou_ ;
      /**
       * <code>optional int64 zuoshou = 8;</code>
       *
       * <pre>
       *NUM 昨收 元 推送 
       * </pre>
       */
      public boolean hasZuoshou() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int64 zuoshou = 8;</code>
       *
       * <pre>
       *NUM 昨收 元 推送 
       * </pre>
       */
      public long getZuoshou() {
        return zuoshou_;
      }
      /**
       * <code>optional int64 zuoshou = 8;</code>
       *
       * <pre>
       *NUM 昨收 元 推送 
       * </pre>
       */
      public Builder setZuoshou(long value) {
        bitField0_ |= 0x00000080;
        zuoshou_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 zuoshou = 8;</code>
       *
       * <pre>
       *NUM 昨收 元 推送 
       * </pre>
       */
      public Builder clearZuoshou() {
        bitField0_ = (bitField0_ & ~0x00000080);
        zuoshou_ = 0L;
        onChanged();
        return this;
      }

      // optional int64 vol = 9;
      private long vol_ ;
      /**
       * <code>optional int64 vol = 9;</code>
       *
       * <pre>
       *NUM 总手 手 推送 
       * </pre>
       */
      public boolean hasVol() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int64 vol = 9;</code>
       *
       * <pre>
       *NUM 总手 手 推送 
       * </pre>
       */
      public long getVol() {
        return vol_;
      }
      /**
       * <code>optional int64 vol = 9;</code>
       *
       * <pre>
       *NUM 总手 手 推送 
       * </pre>
       */
      public Builder setVol(long value) {
        bitField0_ |= 0x00000100;
        vol_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 vol = 9;</code>
       *
       * <pre>
       *NUM 总手 手 推送 
       * </pre>
       */
      public Builder clearVol() {
        bitField0_ = (bitField0_ & ~0x00000100);
        vol_ = 0L;
        onChanged();
        return this;
      }

      // optional int64 xianshou = 10;
      private long xianshou_ ;
      /**
       * <code>optional int64 xianshou = 10;</code>
       *
       * <pre>
       * NUM 现手 手 推送 
       * </pre>
       */
      public boolean hasXianshou() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int64 xianshou = 10;</code>
       *
       * <pre>
       * NUM 现手 手 推送 
       * </pre>
       */
      public long getXianshou() {
        return xianshou_;
      }
      /**
       * <code>optional int64 xianshou = 10;</code>
       *
       * <pre>
       * NUM 现手 手 推送 
       * </pre>
       */
      public Builder setXianshou(long value) {
        bitField0_ |= 0x00000200;
        xianshou_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 xianshou = 10;</code>
       *
       * <pre>
       * NUM 现手 手 推送 
       * </pre>
       */
      public Builder clearXianshou() {
        bitField0_ = (bitField0_ & ~0x00000200);
        xianshou_ = 0L;
        onChanged();
        return this;
      }

      // optional int64 amount = 11;
      private long amount_ ;
      /**
       * <code>optional int64 amount = 11;</code>
       *
       * <pre>
       * NUM 成交额 万元 推送 
       * </pre>
       */
      public boolean hasAmount() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional int64 amount = 11;</code>
       *
       * <pre>
       * NUM 成交额 万元 推送 
       * </pre>
       */
      public long getAmount() {
        return amount_;
      }
      /**
       * <code>optional int64 amount = 11;</code>
       *
       * <pre>
       * NUM 成交额 万元 推送 
       * </pre>
       */
      public Builder setAmount(long value) {
        bitField0_ |= 0x00000400;
        amount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 amount = 11;</code>
       *
       * <pre>
       * NUM 成交额 万元 推送 
       * </pre>
       */
      public Builder clearAmount() {
        bitField0_ = (bitField0_ & ~0x00000400);
        amount_ = 0L;
        onChanged();
        return this;
      }

      // optional int64 junjia = 12;
      private long junjia_ ;
      /**
       * <code>optional int64 junjia = 12;</code>
       *
       * <pre>
       * NUM 均价 元 推送 
       * </pre>
       */
      public boolean hasJunjia() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional int64 junjia = 12;</code>
       *
       * <pre>
       * NUM 均价 元 推送 
       * </pre>
       */
      public long getJunjia() {
        return junjia_;
      }
      /**
       * <code>optional int64 junjia = 12;</code>
       *
       * <pre>
       * NUM 均价 元 推送 
       * </pre>
       */
      public Builder setJunjia(long value) {
        bitField0_ |= 0x00000800;
        junjia_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 junjia = 12;</code>
       *
       * <pre>
       * NUM 均价 元 推送 
       * </pre>
       */
      public Builder clearJunjia() {
        bitField0_ = (bitField0_ & ~0x00000800);
        junjia_ = 0L;
        onChanged();
        return this;
      }

      // optional int64 zhangdie = 13;
      private long zhangdie_ ;
      /**
       * <code>optional int64 zhangdie = 13;</code>
       *
       * <pre>
       * NUM 涨跌 元 推送 
       * </pre>
       */
      public boolean hasZhangdie() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional int64 zhangdie = 13;</code>
       *
       * <pre>
       * NUM 涨跌 元 推送 
       * </pre>
       */
      public long getZhangdie() {
        return zhangdie_;
      }
      /**
       * <code>optional int64 zhangdie = 13;</code>
       *
       * <pre>
       * NUM 涨跌 元 推送 
       * </pre>
       */
      public Builder setZhangdie(long value) {
        bitField0_ |= 0x00001000;
        zhangdie_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 zhangdie = 13;</code>
       *
       * <pre>
       * NUM 涨跌 元 推送 
       * </pre>
       */
      public Builder clearZhangdie() {
        bitField0_ = (bitField0_ & ~0x00001000);
        zhangdie_ = 0L;
        onChanged();
        return this;
      }

      // optional int64 zhenfu = 14;
      private long zhenfu_ ;
      /**
       * <code>optional int64 zhenfu = 14;</code>
       *
       * <pre>
       *NUM 振幅 % 推送 
       * </pre>
       */
      public boolean hasZhenfu() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional int64 zhenfu = 14;</code>
       *
       * <pre>
       *NUM 振幅 % 推送 
       * </pre>
       */
      public long getZhenfu() {
        return zhenfu_;
      }
      /**
       * <code>optional int64 zhenfu = 14;</code>
       *
       * <pre>
       *NUM 振幅 % 推送 
       * </pre>
       */
      public Builder setZhenfu(long value) {
        bitField0_ |= 0x00002000;
        zhenfu_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 zhenfu = 14;</code>
       *
       * <pre>
       *NUM 振幅 % 推送 
       * </pre>
       */
      public Builder clearZhenfu() {
        bitField0_ = (bitField0_ & ~0x00002000);
        zhenfu_ = 0L;
        onChanged();
        return this;
      }

      // optional int64 zhangfu = 15;
      private long zhangfu_ ;
      /**
       * <code>optional int64 zhangfu = 15;</code>
       *
       * <pre>
       * NUM 涨幅 % 推送 	
       * </pre>
       */
      public boolean hasZhangfu() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional int64 zhangfu = 15;</code>
       *
       * <pre>
       * NUM 涨幅 % 推送 	
       * </pre>
       */
      public long getZhangfu() {
        return zhangfu_;
      }
      /**
       * <code>optional int64 zhangfu = 15;</code>
       *
       * <pre>
       * NUM 涨幅 % 推送 	
       * </pre>
       */
      public Builder setZhangfu(long value) {
        bitField0_ |= 0x00004000;
        zhangfu_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 zhangfu = 15;</code>
       *
       * <pre>
       * NUM 涨幅 % 推送 	
       * </pre>
       */
      public Builder clearZhangfu() {
        bitField0_ = (bitField0_ & ~0x00004000);
        zhangfu_ = 0L;
        onChanged();
        return this;
      }

      // optional int64 neipan = 16;
      private long neipan_ ;
      /**
       * <code>optional int64 neipan = 16;</code>
       *
       * <pre>
       *NUM 内盘 手 推送 
       * </pre>
       */
      public boolean hasNeipan() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional int64 neipan = 16;</code>
       *
       * <pre>
       *NUM 内盘 手 推送 
       * </pre>
       */
      public long getNeipan() {
        return neipan_;
      }
      /**
       * <code>optional int64 neipan = 16;</code>
       *
       * <pre>
       *NUM 内盘 手 推送 
       * </pre>
       */
      public Builder setNeipan(long value) {
        bitField0_ |= 0x00008000;
        neipan_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 neipan = 16;</code>
       *
       * <pre>
       *NUM 内盘 手 推送 
       * </pre>
       */
      public Builder clearNeipan() {
        bitField0_ = (bitField0_ & ~0x00008000);
        neipan_ = 0L;
        onChanged();
        return this;
      }

      // optional int64 waipan = 17;
      private long waipan_ ;
      /**
       * <code>optional int64 waipan = 17;</code>
       *
       * <pre>
       *NUM 外盘 手 推送 
       * </pre>
       */
      public boolean hasWaipan() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional int64 waipan = 17;</code>
       *
       * <pre>
       *NUM 外盘 手 推送 
       * </pre>
       */
      public long getWaipan() {
        return waipan_;
      }
      /**
       * <code>optional int64 waipan = 17;</code>
       *
       * <pre>
       *NUM 外盘 手 推送 
       * </pre>
       */
      public Builder setWaipan(long value) {
        bitField0_ |= 0x00010000;
        waipan_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 waipan = 17;</code>
       *
       * <pre>
       *NUM 外盘 手 推送 
       * </pre>
       */
      public Builder clearWaipan() {
        bitField0_ = (bitField0_ & ~0x00010000);
        waipan_ = 0L;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:dzhyun.StkDataSingle)
    }

    static {
      defaultInstance = new StkDataSingle(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:dzhyun.StkDataSingle)
  }

  public interface StkDataOutputOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated .dzhyun.StkDataSingle Results = 1;
    /**
     * <code>repeated .dzhyun.StkDataSingle Results = 1;</code>
     */
    java.util.List<com.dzhyun.proto.DzhyunStkdata.StkDataSingle> 
        getResultsList();
    /**
     * <code>repeated .dzhyun.StkDataSingle Results = 1;</code>
     */
    com.dzhyun.proto.DzhyunStkdata.StkDataSingle getResults(int index);
    /**
     * <code>repeated .dzhyun.StkDataSingle Results = 1;</code>
     */
    int getResultsCount();
    /**
     * <code>repeated .dzhyun.StkDataSingle Results = 1;</code>
     */
    java.util.List<? extends com.dzhyun.proto.DzhyunStkdata.StkDataSingleOrBuilder> 
        getResultsOrBuilderList();
    /**
     * <code>repeated .dzhyun.StkDataSingle Results = 1;</code>
     */
    com.dzhyun.proto.DzhyunStkdata.StkDataSingleOrBuilder getResultsOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code dzhyun.StkDataOutput}
   */
  public static final class StkDataOutput extends
      com.google.protobuf.GeneratedMessage
      implements StkDataOutputOrBuilder {
    // Use StkDataOutput.newBuilder() to construct.
    private StkDataOutput(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private StkDataOutput(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final StkDataOutput defaultInstance;
    public static StkDataOutput getDefaultInstance() {
      return defaultInstance;
    }

    public StkDataOutput getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private StkDataOutput(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                results_ = new java.util.ArrayList<com.dzhyun.proto.DzhyunStkdata.StkDataSingle>();
                mutable_bitField0_ |= 0x00000001;
              }
              results_.add(input.readMessage(com.dzhyun.proto.DzhyunStkdata.StkDataSingle.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          results_ = java.util.Collections.unmodifiableList(results_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dzhyun.proto.DzhyunStkdata.internal_static_dzhyun_StkDataOutput_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dzhyun.proto.DzhyunStkdata.internal_static_dzhyun_StkDataOutput_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dzhyun.proto.DzhyunStkdata.StkDataOutput.class, com.dzhyun.proto.DzhyunStkdata.StkDataOutput.Builder.class);
    }

    public static com.google.protobuf.Parser<StkDataOutput> PARSER =
        new com.google.protobuf.AbstractParser<StkDataOutput>() {
      public StkDataOutput parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new StkDataOutput(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<StkDataOutput> getParserForType() {
      return PARSER;
    }

    // repeated .dzhyun.StkDataSingle Results = 1;
    public static final int RESULTS_FIELD_NUMBER = 1;
    private java.util.List<com.dzhyun.proto.DzhyunStkdata.StkDataSingle> results_;
    /**
     * <code>repeated .dzhyun.StkDataSingle Results = 1;</code>
     */
    public java.util.List<com.dzhyun.proto.DzhyunStkdata.StkDataSingle> getResultsList() {
      return results_;
    }
    /**
     * <code>repeated .dzhyun.StkDataSingle Results = 1;</code>
     */
    public java.util.List<? extends com.dzhyun.proto.DzhyunStkdata.StkDataSingleOrBuilder> 
        getResultsOrBuilderList() {
      return results_;
    }
    /**
     * <code>repeated .dzhyun.StkDataSingle Results = 1;</code>
     */
    public int getResultsCount() {
      return results_.size();
    }
    /**
     * <code>repeated .dzhyun.StkDataSingle Results = 1;</code>
     */
    public com.dzhyun.proto.DzhyunStkdata.StkDataSingle getResults(int index) {
      return results_.get(index);
    }
    /**
     * <code>repeated .dzhyun.StkDataSingle Results = 1;</code>
     */
    public com.dzhyun.proto.DzhyunStkdata.StkDataSingleOrBuilder getResultsOrBuilder(
        int index) {
      return results_.get(index);
    }

    private void initFields() {
      results_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      for (int i = 0; i < getResultsCount(); i++) {
        if (!getResults(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < results_.size(); i++) {
        output.writeMessage(1, results_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < results_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, results_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.dzhyun.proto.DzhyunStkdata.StkDataOutput parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dzhyun.proto.DzhyunStkdata.StkDataOutput parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dzhyun.proto.DzhyunStkdata.StkDataOutput parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.dzhyun.proto.DzhyunStkdata.StkDataOutput parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.dzhyun.proto.DzhyunStkdata.StkDataOutput parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dzhyun.proto.DzhyunStkdata.StkDataOutput parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.dzhyun.proto.DzhyunStkdata.StkDataOutput parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.dzhyun.proto.DzhyunStkdata.StkDataOutput parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.dzhyun.proto.DzhyunStkdata.StkDataOutput parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.dzhyun.proto.DzhyunStkdata.StkDataOutput parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.dzhyun.proto.DzhyunStkdata.StkDataOutput prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dzhyun.StkDataOutput}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.dzhyun.proto.DzhyunStkdata.StkDataOutputOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.dzhyun.proto.DzhyunStkdata.internal_static_dzhyun_StkDataOutput_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.dzhyun.proto.DzhyunStkdata.internal_static_dzhyun_StkDataOutput_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.dzhyun.proto.DzhyunStkdata.StkDataOutput.class, com.dzhyun.proto.DzhyunStkdata.StkDataOutput.Builder.class);
      }

      // Construct using com.dzhyun.proto.DzhyunStkdata.StkDataOutput.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getResultsFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (resultsBuilder_ == null) {
          results_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          resultsBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.dzhyun.proto.DzhyunStkdata.internal_static_dzhyun_StkDataOutput_descriptor;
      }

      public com.dzhyun.proto.DzhyunStkdata.StkDataOutput getDefaultInstanceForType() {
        return com.dzhyun.proto.DzhyunStkdata.StkDataOutput.getDefaultInstance();
      }

      public com.dzhyun.proto.DzhyunStkdata.StkDataOutput build() {
        com.dzhyun.proto.DzhyunStkdata.StkDataOutput result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.dzhyun.proto.DzhyunStkdata.StkDataOutput buildPartial() {
        com.dzhyun.proto.DzhyunStkdata.StkDataOutput result = new com.dzhyun.proto.DzhyunStkdata.StkDataOutput(this);
        int from_bitField0_ = bitField0_;
        if (resultsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            results_ = java.util.Collections.unmodifiableList(results_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.results_ = results_;
        } else {
          result.results_ = resultsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.dzhyun.proto.DzhyunStkdata.StkDataOutput) {
          return mergeFrom((com.dzhyun.proto.DzhyunStkdata.StkDataOutput)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.dzhyun.proto.DzhyunStkdata.StkDataOutput other) {
        if (other == com.dzhyun.proto.DzhyunStkdata.StkDataOutput.getDefaultInstance()) return this;
        if (resultsBuilder_ == null) {
          if (!other.results_.isEmpty()) {
            if (results_.isEmpty()) {
              results_ = other.results_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureResultsIsMutable();
              results_.addAll(other.results_);
            }
            onChanged();
          }
        } else {
          if (!other.results_.isEmpty()) {
            if (resultsBuilder_.isEmpty()) {
              resultsBuilder_.dispose();
              resultsBuilder_ = null;
              results_ = other.results_;
              bitField0_ = (bitField0_ & ~0x00000001);
              resultsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getResultsFieldBuilder() : null;
            } else {
              resultsBuilder_.addAllMessages(other.results_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getResultsCount(); i++) {
          if (!getResults(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.dzhyun.proto.DzhyunStkdata.StkDataOutput parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.dzhyun.proto.DzhyunStkdata.StkDataOutput) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated .dzhyun.StkDataSingle Results = 1;
      private java.util.List<com.dzhyun.proto.DzhyunStkdata.StkDataSingle> results_ =
        java.util.Collections.emptyList();
      private void ensureResultsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          results_ = new java.util.ArrayList<com.dzhyun.proto.DzhyunStkdata.StkDataSingle>(results_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.dzhyun.proto.DzhyunStkdata.StkDataSingle, com.dzhyun.proto.DzhyunStkdata.StkDataSingle.Builder, com.dzhyun.proto.DzhyunStkdata.StkDataSingleOrBuilder> resultsBuilder_;

      /**
       * <code>repeated .dzhyun.StkDataSingle Results = 1;</code>
       */
      public java.util.List<com.dzhyun.proto.DzhyunStkdata.StkDataSingle> getResultsList() {
        if (resultsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(results_);
        } else {
          return resultsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .dzhyun.StkDataSingle Results = 1;</code>
       */
      public int getResultsCount() {
        if (resultsBuilder_ == null) {
          return results_.size();
        } else {
          return resultsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .dzhyun.StkDataSingle Results = 1;</code>
       */
      public com.dzhyun.proto.DzhyunStkdata.StkDataSingle getResults(int index) {
        if (resultsBuilder_ == null) {
          return results_.get(index);
        } else {
          return resultsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .dzhyun.StkDataSingle Results = 1;</code>
       */
      public Builder setResults(
          int index, com.dzhyun.proto.DzhyunStkdata.StkDataSingle value) {
        if (resultsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureResultsIsMutable();
          results_.set(index, value);
          onChanged();
        } else {
          resultsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dzhyun.StkDataSingle Results = 1;</code>
       */
      public Builder setResults(
          int index, com.dzhyun.proto.DzhyunStkdata.StkDataSingle.Builder builderForValue) {
        if (resultsBuilder_ == null) {
          ensureResultsIsMutable();
          results_.set(index, builderForValue.build());
          onChanged();
        } else {
          resultsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dzhyun.StkDataSingle Results = 1;</code>
       */
      public Builder addResults(com.dzhyun.proto.DzhyunStkdata.StkDataSingle value) {
        if (resultsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureResultsIsMutable();
          results_.add(value);
          onChanged();
        } else {
          resultsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .dzhyun.StkDataSingle Results = 1;</code>
       */
      public Builder addResults(
          int index, com.dzhyun.proto.DzhyunStkdata.StkDataSingle value) {
        if (resultsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureResultsIsMutable();
          results_.add(index, value);
          onChanged();
        } else {
          resultsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .dzhyun.StkDataSingle Results = 1;</code>
       */
      public Builder addResults(
          com.dzhyun.proto.DzhyunStkdata.StkDataSingle.Builder builderForValue) {
        if (resultsBuilder_ == null) {
          ensureResultsIsMutable();
          results_.add(builderForValue.build());
          onChanged();
        } else {
          resultsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dzhyun.StkDataSingle Results = 1;</code>
       */
      public Builder addResults(
          int index, com.dzhyun.proto.DzhyunStkdata.StkDataSingle.Builder builderForValue) {
        if (resultsBuilder_ == null) {
          ensureResultsIsMutable();
          results_.add(index, builderForValue.build());
          onChanged();
        } else {
          resultsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .dzhyun.StkDataSingle Results = 1;</code>
       */
      public Builder addAllResults(
          java.lang.Iterable<? extends com.dzhyun.proto.DzhyunStkdata.StkDataSingle> values) {
        if (resultsBuilder_ == null) {
          ensureResultsIsMutable();
          super.addAll(values, results_);
          onChanged();
        } else {
          resultsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .dzhyun.StkDataSingle Results = 1;</code>
       */
      public Builder clearResults() {
        if (resultsBuilder_ == null) {
          results_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          resultsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .dzhyun.StkDataSingle Results = 1;</code>
       */
      public Builder removeResults(int index) {
        if (resultsBuilder_ == null) {
          ensureResultsIsMutable();
          results_.remove(index);
          onChanged();
        } else {
          resultsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .dzhyun.StkDataSingle Results = 1;</code>
       */
      public com.dzhyun.proto.DzhyunStkdata.StkDataSingle.Builder getResultsBuilder(
          int index) {
        return getResultsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .dzhyun.StkDataSingle Results = 1;</code>
       */
      public com.dzhyun.proto.DzhyunStkdata.StkDataSingleOrBuilder getResultsOrBuilder(
          int index) {
        if (resultsBuilder_ == null) {
          return results_.get(index);  } else {
          return resultsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .dzhyun.StkDataSingle Results = 1;</code>
       */
      public java.util.List<? extends com.dzhyun.proto.DzhyunStkdata.StkDataSingleOrBuilder> 
           getResultsOrBuilderList() {
        if (resultsBuilder_ != null) {
          return resultsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(results_);
        }
      }
      /**
       * <code>repeated .dzhyun.StkDataSingle Results = 1;</code>
       */
      public com.dzhyun.proto.DzhyunStkdata.StkDataSingle.Builder addResultsBuilder() {
        return getResultsFieldBuilder().addBuilder(
            com.dzhyun.proto.DzhyunStkdata.StkDataSingle.getDefaultInstance());
      }
      /**
       * <code>repeated .dzhyun.StkDataSingle Results = 1;</code>
       */
      public com.dzhyun.proto.DzhyunStkdata.StkDataSingle.Builder addResultsBuilder(
          int index) {
        return getResultsFieldBuilder().addBuilder(
            index, com.dzhyun.proto.DzhyunStkdata.StkDataSingle.getDefaultInstance());
      }
      /**
       * <code>repeated .dzhyun.StkDataSingle Results = 1;</code>
       */
      public java.util.List<com.dzhyun.proto.DzhyunStkdata.StkDataSingle.Builder> 
           getResultsBuilderList() {
        return getResultsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.dzhyun.proto.DzhyunStkdata.StkDataSingle, com.dzhyun.proto.DzhyunStkdata.StkDataSingle.Builder, com.dzhyun.proto.DzhyunStkdata.StkDataSingleOrBuilder> 
          getResultsFieldBuilder() {
        if (resultsBuilder_ == null) {
          resultsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.dzhyun.proto.DzhyunStkdata.StkDataSingle, com.dzhyun.proto.DzhyunStkdata.StkDataSingle.Builder, com.dzhyun.proto.DzhyunStkdata.StkDataSingleOrBuilder>(
                  results_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          results_ = null;
        }
        return resultsBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:dzhyun.StkDataOutput)
    }

    static {
      defaultInstance = new StkDataOutput(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:dzhyun.StkDataOutput)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_dzhyun_StkDataSingle_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dzhyun_StkDataSingle_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_dzhyun_StkDataOutput_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dzhyun_StkDataOutput_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\024dzhyun.stkdata.proto\022\006dzhyun\"\224\002\n\rStkDa" +
      "taSingle\022\013\n\003obj\030\001 \002(\t\022\r\n\005label\030\002 \001(\t\022\014\n\004" +
      "name\030\003 \001(\t\022\014\n\004open\030\004 \001(\003\022\014\n\004high\030\005 \001(\003\022\013" +
      "\n\003low\030\006 \001(\003\022\r\n\005price\030\007 \001(\003\022\017\n\007zuoshou\030\010 " +
      "\001(\003\022\013\n\003vol\030\t \001(\003\022\020\n\010xianshou\030\n \001(\003\022\016\n\006am" +
      "ount\030\013 \001(\003\022\016\n\006junjia\030\014 \001(\003\022\020\n\010zhangdie\030\r" +
      " \001(\003\022\016\n\006zhenfu\030\016 \001(\003\022\017\n\007zhangfu\030\017 \001(\003\022\016\n" +
      "\006neipan\030\020 \001(\003\022\016\n\006waipan\030\021 \001(\003\"7\n\rStkData" +
      "Output\022&\n\007Results\030\001 \003(\0132\025.dzhyun.StkData" +
      "SingleB\022\n\020com.dzhyun.proto"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_dzhyun_StkDataSingle_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_dzhyun_StkDataSingle_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_dzhyun_StkDataSingle_descriptor,
              new java.lang.String[] { "Obj", "Label", "Name", "Open", "High", "Low", "Price", "Zuoshou", "Vol", "Xianshou", "Amount", "Junjia", "Zhangdie", "Zhenfu", "Zhangfu", "Neipan", "Waipan", });
          internal_static_dzhyun_StkDataOutput_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_dzhyun_StkDataOutput_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_dzhyun_StkDataOutput_descriptor,
              new java.lang.String[] { "Results", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
